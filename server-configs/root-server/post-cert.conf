upstream api {
    server api-server:8080;
	server ${PROXIED_1};
	# server ${PROXIED_2};
}

server {    
	
	listen [::]:443 ssl;
    listen 443 ssl;

    ssl_certificate /etc/letsencrypt/live/ec2api.flow-issue-tracker.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ec2api.flow-issue-tracker.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;


	server_name ec2api.flow-issue-tracker.com;

	location / {
		# resolver 127.0.0.11 ipv6=off;
		proxy_pass http://api;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;
       if ($request_method = OPTIONS ) {

            add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';

            return 200;
        }


		# Proxy headers
		proxy_set_header X-Forwarded-Host  $host;
		proxy_set_header X-Forwarded-Port  $server_port;
		proxy_set_header X-NginX-Proxy true;
		proxy_redirect off;

		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $remote_addr; # $remote_addr 
		proxy_set_header Cookie $http_cookie;

		chunked_transfer_encoding off;
		proxy_buffering off;
		proxy_cache off;


	}

	location ~* \.(eot|ttf|woff|woff2)$ {
		add_header Access-Control-Allow-Origin *;
	}


}

server {	
	
	listen 80;
	listen [::]:80;

    location / {
        return 301 https://$host$request_uri;
    }

	location /.well-known/acme-challenge/ {
		root /var/www/certbot;
	}

	server_name ec2api.flow-issue-tracker.com;

}